// <auto-generated />
using System;
using Ecom.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ecom.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Ecom.Core.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Ecom.Core.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Books Category",
                            Name = "Books"
                        });
                });

            modelBuilder.Entity("Ecom.Core.Entities.Orders.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CustomerEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Ecom.Core.Entities.Orders.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Ecom.Core.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductPicture")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "Description for Clean Code",
                            Name = "Clean Code",
                            Price = 204m,
                            ProductPicture = "/images/products/CleanCode.jpg"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Description = "Description for The Pragmatic Programmer",
                            Name = "The Pragmatic Programmer",
                            Price = 862m,
                            ProductPicture = "/images/products/ThePragmaticProgrammer.jpg"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            Description = "Description for Design Patterns",
                            Name = "Design Patterns",
                            Price = 222m,
                            ProductPicture = "/images/products/DesignPatterns.jpg"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            Description = "Description for Refactoring",
                            Name = "Refactoring",
                            Price = 420m,
                            ProductPicture = "/images/products/Refactoring.jpg"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            Description = "Description for Code Complete",
                            Name = "Code Complete",
                            Price = 829m,
                            ProductPicture = "/images/products/CodeComplete.jpg"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 1,
                            Description = "Description for Introduction to Algorithms",
                            Name = "Introduction to Algorithms",
                            Price = 151m,
                            ProductPicture = "/images/products/IntroductiontoAlgorithms.jpg"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 1,
                            Description = "Description for Head First Design Patterns",
                            Name = "Head First Design Patterns",
                            Price = 457m,
                            ProductPicture = "/images/products/HeadFirstDesignPatterns.jpg"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 1,
                            Description = "Description for Effective C#",
                            Name = "Effective C#",
                            Price = 906m,
                            ProductPicture = "/images/products/EffectiveC#.jpg"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 1,
                            Description = "Description for The Clean Coder",
                            Name = "The Clean Coder",
                            Price = 869m,
                            ProductPicture = "/images/products/TheCleanCoder.jpg"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 1,
                            Description = "Description for Programming Pearls",
                            Name = "Programming Pearls",
                            Price = 862m,
                            ProductPicture = "/images/products/ProgrammingPearls.jpg"
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 1,
                            Description = "Description for Cracking the Coding Interview",
                            Name = "Cracking the Coding Interview",
                            Price = 352m,
                            ProductPicture = "/images/products/CrackingtheCodingInterview.jpg"
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 1,
                            Description = "Description for JavaScript: The Good Parts",
                            Name = "JavaScript: The Good Parts",
                            Price = 667m,
                            ProductPicture = "/images/products/JavaScript:TheGoodParts.jpg"
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 1,
                            Description = "Description for Domain-Driven Design",
                            Name = "Domain-Driven Design",
                            Price = 445m,
                            ProductPicture = "/images/products/Domain-DrivenDesign.jpg"
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 1,
                            Description = "Description for Python Crash Course",
                            Name = "Python Crash Course",
                            Price = 984m,
                            ProductPicture = "/images/products/PythonCrashCourse.jpg"
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 1,
                            Description = "Description for Clean Architecture",
                            Name = "Clean Architecture",
                            Price = 512m,
                            ProductPicture = "/images/products/CleanArchitecture.jpg"
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 1,
                            Description = "Description for Test Driven Development",
                            Name = "Test Driven Development",
                            Price = 156m,
                            ProductPicture = "/images/products/TestDrivenDevelopment.jpg"
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 1,
                            Description = "Description for Eloquent JavaScript",
                            Name = "Eloquent JavaScript",
                            Price = 317m,
                            ProductPicture = "/images/products/EloquentJavaScript.jpg"
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 1,
                            Description = "Description for Head First Java",
                            Name = "Head First Java",
                            Price = 256m,
                            ProductPicture = "/images/products/HeadFirstJava.jpg"
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 1,
                            Description = "Description for Learning Python",
                            Name = "Learning Python",
                            Price = 549m,
                            ProductPicture = "/images/products/LearningPython.jpg"
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 1,
                            Description = "Description for Algorithms: Part I",
                            Name = "Algorithms: Part I",
                            Price = 329m,
                            ProductPicture = "/images/products/Algorithms:PartI.jpg"
                        },
                        new
                        {
                            Id = 21,
                            CategoryId = 1,
                            Description = "Description for Algorithms: Part II",
                            Name = "Algorithms: Part II",
                            Price = 56m,
                            ProductPicture = "/images/products/Algorithms:PartII.jpg"
                        },
                        new
                        {
                            Id = 22,
                            CategoryId = 1,
                            Description = "Description for Effective Java",
                            Name = "Effective Java",
                            Price = 824m,
                            ProductPicture = "/images/products/EffectiveJava.jpg"
                        },
                        new
                        {
                            Id = 23,
                            CategoryId = 1,
                            Description = "Description for Java Concurrency in Practice",
                            Name = "Java Concurrency in Practice",
                            Price = 596m,
                            ProductPicture = "/images/products/JavaConcurrencyinPractice.jpg"
                        },
                        new
                        {
                            Id = 24,
                            CategoryId = 1,
                            Description = "Description for Refactoring to Patterns",
                            Name = "Refactoring to Patterns",
                            Price = 114m,
                            ProductPicture = "/images/products/RefactoringtoPatterns.jpg"
                        },
                        new
                        {
                            Id = 25,
                            CategoryId = 1,
                            Description = "Description for Head First Python",
                            Name = "Head First Python",
                            Price = 826m,
                            ProductPicture = "/images/products/HeadFirstPython.jpg"
                        },
                        new
                        {
                            Id = 26,
                            CategoryId = 1,
                            Description = "Description for The Mythical Man-Month",
                            Name = "The Mythical Man-Month",
                            Price = 669m,
                            ProductPicture = "/images/products/TheMythicalMan-Month.jpg"
                        },
                        new
                        {
                            Id = 27,
                            CategoryId = 1,
                            Description = "Description for Grokking Algorithms",
                            Name = "Grokking Algorithms",
                            Price = 222m,
                            ProductPicture = "/images/products/GrokkingAlgorithms.jpg"
                        },
                        new
                        {
                            Id = 28,
                            CategoryId = 1,
                            Description = "Description for Concurrency in C# Cookbook",
                            Name = "Concurrency in C# Cookbook",
                            Price = 637m,
                            ProductPicture = "/images/products/ConcurrencyinC#Cookbook.jpg"
                        },
                        new
                        {
                            Id = 29,
                            CategoryId = 1,
                            Description = "Description for Programming Entity Framework",
                            Name = "Programming Entity Framework",
                            Price = 962m,
                            ProductPicture = "/images/products/ProgrammingEntityFramework.jpg"
                        },
                        new
                        {
                            Id = 30,
                            CategoryId = 1,
                            Description = "Description for The Algorithm Design Manual",
                            Name = "The Algorithm Design Manual",
                            Price = 333m,
                            ProductPicture = "/images/products/TheAlgorithmDesignManual.jpg"
                        },
                        new
                        {
                            Id = 31,
                            CategoryId = 1,
                            Description = "Description for Java Performance",
                            Name = "Java Performance",
                            Price = 759m,
                            ProductPicture = "/images/products/JavaPerformance.jpg"
                        },
                        new
                        {
                            Id = 32,
                            CategoryId = 1,
                            Description = "Description for Operating System Concepts",
                            Name = "Operating System Concepts",
                            Price = 211m,
                            ProductPicture = "/images/products/OperatingSystemConcepts.jpg"
                        },
                        new
                        {
                            Id = 33,
                            CategoryId = 1,
                            Description = "Description for Database Management Systems",
                            Name = "Database Management Systems",
                            Price = 225m,
                            ProductPicture = "/images/products/DatabaseManagementSystems.jpg"
                        },
                        new
                        {
                            Id = 34,
                            CategoryId = 1,
                            Description = "Description for Automate the Boring Stuff",
                            Name = "Automate the Boring Stuff",
                            Price = 558m,
                            ProductPicture = "/images/products/AutomatetheBoringStuff.jpg"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Ecom.Core.Entities.Orders.OrderItem", b =>
                {
                    b.HasOne("Ecom.Core.Entities.Orders.Order", null)
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Ecom.Core.Entities.Orders.ProductItemOrdered", "ProductItemOrdered", b1 =>
                        {
                            b1.Property<int>("OrderItemId")
                                .HasColumnType("int");

                            b1.Property<string>("PictureUrl")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("ProductItemId")
                                .HasColumnType("int");

                            b1.Property<string>("ProductItemName")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OrderItemId");

                            b1.ToTable("OrderItems");

                            b1.WithOwner()
                                .HasForeignKey("OrderItemId");
                        });

                    b.Navigation("ProductItemOrdered");
                });

            modelBuilder.Entity("Ecom.Core.Entities.Product", b =>
                {
                    b.HasOne("Ecom.Core.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Ecom.Core.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Ecom.Core.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecom.Core.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Ecom.Core.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ecom.Core.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Ecom.Core.Entities.Orders.Order", b =>
                {
                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
